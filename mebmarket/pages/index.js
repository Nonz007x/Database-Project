import Head from "next/head";
import ItemSmall from "@/components/ItemSmall";
import { useEffect, useState, useCallback } from "react";
import { Button } from "@mui/material";
import React, { useMemo } from "react";
import Loading from "@/components/Loading";
import Link from "next/link";
import addToCart from "@/shared/addtocart";

export async function getServerSideProps() {
    try {
        const [recentItems, data, trendingItems] = await Promise.all([
            fetch("http://localhost:3000/api/bookmap/getRecentAdded").then(res => res.json()),
            fetch("http://localhost:3000/api/bookmap/get").then(res => res.json()),
            fetch("http://localhost:3000/api/bookmap/getBookByRating").then(res => res.json())
        ]);
        return {
            props: {
                recentItems,
                data,
                trendingItems,
            },
        };
    } catch (error) {
        return {
            props: {
                recentItems: [],
                data: [],
                trendingItems: [],
            }
        }
    }
};

export default function Home({ recentItems, data, trendingItems }) {
    const ItemSmallMemoized = React.memo(ItemSmall);
    const [OpenAll, setOpenAll] = useState(false);
    const [loading, setLoading] = useState(true);

    const handleClick = useCallback(() => {
        setOpenAll((prevState) => !prevState);
    }, []);

    const mapping = useMemo(() =>
        data.map((property, index) => (
            <React.Fragment key={`${property.bookId}-${index}`}>
                <ItemSmallMemoized property={property} addToCart={addToCart} />
            </React.Fragment>
        )),
        [data, ItemSmallMemoized]
    );

    const RecentItemsMapped = useMemo(() =>
        recentItems.map((property, index) => (
            <React.Fragment key={`${property.bookId}-${index}`}>
                <ItemSmallMemoized property={property} addToCart={addToCart} />
            </React.Fragment>
        )),
        [recentItems, ItemSmallMemoized]
    );

    const TrendingItemsMapped = useMemo(() =>
        trendingItems.map((property, index) => (
            <React.Fragment key={`${property.bookId}-${index}`}>
                <ItemSmallMemoized property={property} addToCart={addToCart} />
            </React.Fragment>
        )),
        [trendingItems, ItemSmallMemoized]
    );

    useEffect(() => {
        setLoading(false);
    }, []);

    if (loading) {
        return <Loading />
    }

    return (
        <>
            <Head>
                <title>meb: e-book ร้านอีบุ๊กจีนแดงอันดับ 1 </title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link
                    rel="icon"
                    type="image/png"
                    href="https://www.mebmarket.com/web/assets/images/ico/favicon-32x32.png"
                />
            </Head>
            <div className="sub-content-container">
                <div className="header-sub-content-container">
                    <h2>สินค้ามาใหม่</h2>
                    <Link href="/recentaddedpage">
                        <Button className="view-recent-button">
                            ดูทั้งหมด
                        </Button>
                    </Link>
                </div>
                <div className="content-small-container">
                    {RecentItemsMapped}
                </div>
            </div>
            <div className="sub-content-container">
                <div className="header-sub-content-container">
                    <h2>สินค้ามาแรง</h2>
                    <Link href="/trendingpage">
                        <Button className="view-recent-button">
                            ดูทั้งหมด
                        </Button>
                    </Link>
                </div>
                <div className="content-small-container">
                    {TrendingItemsMapped}
                </div>
            </div>
            <div className="AddWidthToShowAll">
                <Button
                    variant="contained"
                    className="EditButton"
                    onClick={() => {
                        handleClick();
                    }}
                >
                    {!OpenAll ? "Show " : "Hide "}ทั้งหมด
                </Button>
            </div>
            <div className="CollapseWidth">{OpenAll ? mapping : null}</div>
        </>
    );
}