import * as React from 'react';
import Card from '@mui/material/Card';
import CardContent from '@mui/material/CardContent';
import MenuBookIcon from '@mui/icons-material/MenuBook';
import CommentIcon from '@mui/icons-material/Comment';
import { fetcher } from './api/fetcher';
import RecentCommentAllbook from '@/components/RecentCommentAllbook';
import { requireAuthentication } from "@/utils/requireAuthentication";
import PersonIcon from '@mui/icons-material/Person';
import Head from 'next/head';
import Link from 'next/link';
import { TextField } from '@mui/material';
import { Pagination } from '@mui/material';

export async function CommentPageFetch(amount, page) {
    const res = await fetch("http://localhost:3000/api/getComments/getrecentComment", {
        method: "POST",
        headers: {
            "Content-Type": "application/x-www-form-urlencoded",
        },
        body: new URLSearchParams({
            amount: amount,
            page: page,
        }),
    });
    const data = await res.json()
    return data
}

export async function getServerSideProps(context) {
    const BookCount = await fetcher("http://localhost:3000/api/getcount");
    const UsersCount = await fetcher("http://localhost:3000/api/user/getcountuser")
    const RecentComment = await CommentPageFetch(5, 1);
    const Commentcount = await fetcher("http://localhost:3000/api/getComments/getAllcommentCount")
    return requireAuthentication(context, ({ session }) => {
        return {
            props: { BookCount, UsersCount, RecentComment, Commentcount }, // will be passed to the page component as props
        };
    });
}
export default function admindashboard({ BookCount, UsersCount, RecentComment, Commentcount }) {
    const [recentComment, setRecentComment] = React.useState(RecentComment)
    const [contenPerPage, setContenPerPage] = React.useState(5)
    const [page, setPage] = React.useState(1)
    const [pageAmount, setPageAmount] = React.useState(Math.ceil(Commentcount / contenPerPage))
    const getPageAmount = async () => {
        const res = await fetcher("http://localhost:3000/api/getComments/getAllcommentCount")
            .then(e => setPageAmount(Math.ceil(e / contenPerPage)))
    }

    const fetchPage = async () => {
        const res = await fetch("http://localhost:3000/api/getComments/getrecentComment", {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
            },
            body: new URLSearchParams({
                amount: contenPerPage,
                page: page,
            }),
        }).then(e => e.json()).then(data => setRecentComment(data))
    }

    const handleChange = (event, value) => {
        setPage(value);
    };

    React.useEffect(() => {
        fetchPage()
        getPageAmount()
    }, [contenPerPage, page])
    return (
        <>
            <Head>
                <title>Dashboard</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link
                    rel="icon"
                    type="image/png"
                    href="https://www.mebmarket.com/web/assets/images/ico/favicon-32x32.png"
                />
            </Head>
            <div className="dashboard-container">
                <Link href="./admin/book">
                    <Card sx={{ height: 250, width: 450 }} className="cardbox">
                        <CardContent>
                            <MenuBookIcon className='dashboard-icon' />
                        </CardContent>
                        <div className="dashboard-text">
                            <h2>หนังสือ</h2>
                            <h4>จำนวนหนังสือทั้งหมด</h4>
                            <h3>{BookCount}</h3>
                        </div>
                    </Card>
                </Link>
                <Link href="./admin/user">
                    <Card sx={{ height: 250, width: 450 }} className="cardbox">
                        <CardContent>
                            <PersonIcon className='dashboard-icon' />
                        </CardContent>
                        <div className="dashboard-text">
                            <h2>User</h2>
                            <h4>จำนวน User ทั้งหมด</h4>
                            <h3>{UsersCount}</h3>
                        </div>
                    </Card>
                </Link>
                <Card sx={{ width: 1000 }} className="cardbox dashboard-comment">
                    <CardContent className="dashboard-comment-header">
                        <CommentIcon fontSize='large' className='commentbox-icon' />
                        <h2>คอมเมนต์ล่าสุด</h2>
                    </CardContent>
                    <div className="dashboard-text-comment">
                        <div className='comment-page-wrap'>
                            <div className='comment-page-input'>
                                <TextField label="จำนวนต่อหน้า" value={contenPerPage || ""} onChange={e => setContenPerPage(e.target.value)} />
                                <Pagination size='large' className='comment-pagination' count={pageAmount || ""} page={page || ""} onChange={handleChange} />
                            </div>
                        </div>
                        {Object.values(recentComment).map((property, index) => {
                            return (<RecentCommentAllbook className="dashboard-comment-items" key={index} property={property} />)
                        })}
                        <div className='comment-page-wrap'>
                            <div className='comment-page-input'>
                                <TextField label="จำนวนต่อหน้า" value={contenPerPage || ""} onChange={e => setContenPerPage(e.target.value)} />
                                <Pagination size='large' className='comment-pagination' count={pageAmount || ""} page={page || ""} onChange={handleChange} />
                            </div>
                        </div>
                    </div>
                </Card>
            </div>
        </>
    )
}