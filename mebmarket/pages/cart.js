import Head from "next/head";
import CartItem from "@/components/CartItems";
import { Button } from "@mui/material";
import Link from "next/link";
import { getSession } from "next-auth/react";
import { useState, useEffect } from "react";
import DeleteOutlineOutlinedIcon from "@mui/icons-material/DeleteOutlineOutlined";

export default function Cart({ CartData, username }) {
    const SSRdata = CartData;
    // const [BookData, setBookData] = useState(CartData);
    const [checkedItems, setCheckedItems] = useState(
        Array(SSRdata.length).fill(true)
    );
    const [itemPrices, setItemPrices] = useState(
        Array(SSRdata.length)
            .fill(0)
            .map((price, index) => {
                return checkedItems[index] ? SSRdata[index].price : 0;
            })
    );
    const [SelectedItem, setSelectedItem] = useState(
        Array(SSRdata.length)
            .fill("")
            .map((data, index) => {
                return checkedItems[index] ? SSRdata[index] : "";
            })
    );
    const handleCheckboxChange = (index) => {
        const newCheckedItems = [...checkedItems];
        newCheckedItems[index] = !newCheckedItems[index];
        setCheckedItems(newCheckedItems);

        const newItemPrices = [...itemPrices];
        newItemPrices[index] = newCheckedItems[index]
            ? SSRdata[index].price
            : 0;
        setItemPrices(newItemPrices);
    };
    const handleDelete = async (bookId) => {
        const res = await fetch("http://localhost:3000/api/cart/cartdel", {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded",
            },
            body: new URLSearchParams({
                bookId: bookId,
                username: username,
            }),
        });
    
    };

    useEffect(() => {
        const newItem = checkedItems.map((isChecked, index) =>
            isChecked ? SSRdata[index] : ""
        );
        console.log(newItem);
        setSelectedItem(newItem);
    }, [checkedItems, SSRdata]);
    const totalPrice = itemPrices.reduce((acc, cur) => acc + cur, 0);

    return (
        <>
            <Head>
                <title>ตะกร้า</title>
                <meta
                    name="description"
                    content="Generated by create next app"
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1"
                />
                <link
                    rel="icon"
                    type="image/png"
                    href="https://www.mebmarket.com/web/assets/images/ico/favicon-32x32.png"
                />
            </Head>
            <h1 className="cart-header">ตะกร้า</h1>
            <div className="center-cart-items">
                <div className="Cart-Items-container">
                    {Object.values(SSRdata).map((property, index) => {
                        return (
                            <li className="Items-row" key={index}>
                                <input
                                    type="checkbox"
                                    checked={checkedItems[index]}
                                    onChange={() => {
                                        handleCheckboxChange(index);
                                    }}
                                />
                                {/* <CheckBox value={property.price}/> */}
                                <CartItem
                                    property={property}
                                />
                                <div className="CartItem-Delete">
                                    <Button
                                        size="small"
                                        variant="outlined"
                                        className="CartItem-Delete-Delete-button"
                                        onClick={() => {
                                            handleDelete(property.bookId);
                                        }}
                                    >
                                        <DeleteOutlineOutlinedIcon />
                                        ลบ
                                    </Button>
                                </div>
                            </li>
                        );
                    })}
                </div>
                <Link href="/">
                    <h5 className="select-other-book">
                        เลือกหนังสือเล่มอื่นต่อ
                    </h5>
                </Link>
            </div>
            <div className="totalPrice-wrap">
                <div className="display-totalPrice">
                    <h3>ยอดชำระ ฿{totalPrice}</h3>
                    <Button
                        variant="contained"
                        size="medium"
                        className="purchase"
                    >
                        ชำระเงิน
                    </Button>
                </div>
            </div>
        </>
    );
}

export async function getServerSideProps(context) {
    const res = await getSession(context);
    const username = res.user.name;
    // const CartData = fetchData();
    const CartData = await fetchData(username);
    return {
        props: { CartData, username },
    };
}
export async function fetchData(username) {
    const res = await fetch("http://localhost:3000/api/cart/getcart", {
        method: "POST",
        headers: {
            "Content-Type": "application/x-www-form-urlencoded",
        },
        body: new URLSearchParams({
            username: username,
        }),
    });
    const data = await res.json();
    return data;
}
